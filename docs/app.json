[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(tidyr)\nlibrary(tibble)\n\n\nmy_theme <- bs_theme(\n  bg = \"#F5F1E9\",  # Warm off-white background\n  fg = \"#1A1A1A\",  # Darker text for better contrast\n  primary = \"#654062\",  # Deeper purple\n  secondary = \"#9C3D54\",  # Richer rose\n  success = \"#497174\",  # Deeper sage\n  info = \"#344D67\",  # Deeper blue\n  font_scale = 0.9,\n  heading_font = \"Garamond\",\n  base_font = \"Garamond\",\n  \"card-bg\" = \"#FFFFFF\",\n  \"navbar-bg\" = \"#F5F1E9\",  # Light background\n  # Update navbar colors to dark\n  \"navbar-light-color\" = \"#1A1A1A\",\n  \"navbar-light-active-color\" = \"#000000\",\n  \"navbar-light-hover-color\" = \"#2A2A2A\",\n  \"nav-link-color\" = \"#1A1A1A\",\n  \"nav-link-hover-color\" = \"#000000\",\n  \"nav-pills-link-active-color\" = \"#000000\",\n  # Update hamburger menu to dark\n  \"navbar-light-toggler-icon-bg\" = \"url(\\\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.75%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\\\")\",\n  \"navbar-light-toggler-border-color\" = \"rgba(0, 0, 0, 0.3)\",\n  # Make the brand (title) dark\n  \"navbar-light-brand-color\" = \"#1A1A1A\",\n  \"navbar-light-brand-hover-color\" = \"#000000\"\n)\n\n\nnostalgic_colors <- c(\n  \"#654062\",  # Deep purple\n  \"#9C3D54\",  # Rich rose\n  \"#497174\",  # Deep sage\n  \"#344D67\",  # Navy blue\n  \"#B85C38\",  # Rust orange\n  \"#4D4C7D\"   # Deep indigo\n)\n\nui <- page_navbar(\n  theme = my_theme,\n  title = \"MindFill: A Brain Dump Analyser\",\n  nav_panel(\n    title = \"Overview\",\n    layout_sidebar(\n      sidebar = sidebar(\n        fileInput(\"file\", \"Upload your emotion journal data (CSV format)\"),\n        selectInput(\"emotions\", \"Select Emotions to Analyze:\", \n                    choices = NULL, \n                    multiple = TRUE),\n        dateRangeInput(\"date_range\", \"Select Date Range:\"),\n        selectInput(\"time_group\", \"Group by:\",\n                    choices = c(\"Year\", \"Month\", \"Day\", \"Hour\")\n        )\n      ),\n      layout_columns(\n        fill = FALSE,\n        value_box(\n          title = \"Average Selected Emotions\",\n          value = htmlOutput(\"avg_emotions\"),\n          theme = \"primary\"\n        ),\n        value_box(\n          title = \"Number of Entries\",\n          value = textOutput(\"entry_count\"),\n          theme = \"secondary\"\n        ),\n        value_box(\n          title = \"Time Period\",\n          value = textOutput(\"time_period\"),\n          theme = \"info\"\n        )\n      ),\n      card(\n        full_screen = TRUE,\n        card_header(\"Emotion Trends Over Time\"),\n        plotOutput(\"trend_plot\", height = \"400px\")\n      ),\n      card(\n        full_screen = TRUE,\n        card_header(\"Emotion Distributions\"),\n        plotOutput(\"dist_plot\", height = \"400px\")\n      )\n    )\n  ),\n  nav_panel(\n    title = \"Sentence Analysis\",\n    layout_sidebar(\n      sidebar = sidebar(\n        dateRangeInput(\"doc_date_range\", \"Select Date Range:\"),\n        selectInput(\"doc_id\", \"Select Document ID:\", choices = NULL),\n        selectInput(\"doc_emotions\", \"Select Emotions:\", \n                    choices = NULL,\n                    multiple = TRUE)\n      ),\n      card(\n        full_screen = TRUE,\n        card_header(\"Sentence Emotion Analysis\"),\n        DTOutput(\"doc_analysis\")\n      ),\n      layout_columns(\n        card(\n          full_screen = TRUE,\n          card_header(\"Sentence Emotion Scores\"),\n          plotOutput(\"doc_emotion_plot\", height = \"400px\")\n        ),\n        card(\n          full_screen = TRUE,\n          card_header(\"Emotion Progress Through Document\"),\n          plotOutput(\"doc_time_plot\", height = \"400px\")\n        )\n      )\n    )\n  ),\n  nav_panel(\n    title = \"Data Explorer\",\n    layout_sidebar(\n      sidebar = sidebar(\n        selectInput(\"plot_type\", \"Select Plot Type:\",\n                    choices = c(\n                      \"Emotions Over Time\" = \"emotions_time\",\n                      \"Emotion Correlations\" = \"correlations\",\n                      \"Entries per Day\" = \"entries_day\",\n                      \"Average Emotions by Hour\" = \"emotions_hour\"\n                    )\n        ),\n        selectInput(\"explore_emotions\", \"Select Emotions to Compare:\",\n                    choices = NULL,\n                    multiple = TRUE\n        )\n      ),\n      layout_columns(\n        card(\n          full_screen = TRUE,\n          card_header(\"Data Visualization\"),\n          plotOutput(\"explorer_plot\", height = \"400px\")\n        ),\n        card(\n          full_screen = TRUE,\n          card_header(\"Journal Entries\"),\n          DTOutput(\"journal_table\")\n        )\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    req(input$file)\n    df <- read.csv(input$file$datapath, sep=\"|\")\n    df$date <- as.Date(df$date)\n    return(df)\n  })\n  \n  observe({\n    req(data())\n    emotion_cols <- names(data())[grep(\"^[^(text|sentence|date|year|month|day|hour|doc_id)]\", names(data()))]\n    updateSelectInput(session, \"emotions\", choices = emotion_cols, selected = emotion_cols[1])\n    updateSelectInput(session, \"doc_emotions\", choices = emotion_cols, selected = emotion_cols[1])\n    updateSelectInput(session, \"explore_emotions\", \n                      choices = emotion_cols,\n                      selected = emotion_cols[1:2])\n  })\n  \n  observe({\n    req(data())\n    updateDateRangeInput(session, \"date_range\",\n                         start = min(data()$date),\n                         end = max(data()$date)\n    )\n    updateDateRangeInput(session, \"doc_date_range\",\n                         start = min(data()$date),\n                         end = max(data()$date)\n    )\n  })\n  \n  filtered_doc_ids <- reactive({\n    req(data(), input$doc_date_range)\n    data() %>%\n      filter(\n        date >= input$doc_date_range[1],\n        date <= input$doc_date_range[2]\n      ) %>%\n      pull(doc_id) %>%\n      unique() %>%\n      sort()\n  })\n  \n  observe({\n    req(filtered_doc_ids())\n    updateSelectInput(session, \"doc_id\", \n                      choices = filtered_doc_ids())\n  })\n  \n  filtered_data <- reactive({\n    req(data(), input$date_range)\n    data() %>%\n      filter(\n        date >= input$date_range[1],\n        date <= input$date_range[2]\n      )\n  })\n  \n  output$avg_emotions <- renderUI({\n    req(filtered_data(), input$emotions)\n    averages <- sapply(input$emotions, function(emotion) {\n      sprintf(\"<strong>%s<\/strong>: %.2f%%\", emotion, \n              mean(filtered_data()[[emotion]]) * 100)\n    })\n    HTML(paste(averages, collapse = \"<br>\"))\n  })\n  \n  output$entry_count <- renderText({\n    req(filtered_data())\n    n_distinct(filtered_data()$doc_id)\n  })\n  \n  output$time_period <- renderText({\n    req(input$date_range)\n    paste(format(input$date_range[1], \"%b %Y\"),\n          \"to\",\n          format(input$date_range[2], \"%b %Y\")\n    )\n  })\n  \n  output$trend_plot <- renderPlot({\n    req(filtered_data(), input$emotions, input$time_group)\n    \n    df <- filtered_data()\n    group_var <- tolower(input$time_group)\n    \n    df %>%\n      group_by(across(all_of(group_var))) %>%\n      summarise(\n        across(all_of(input$emotions), mean),\n        .groups = \"drop\"\n      ) %>%\n      pivot_longer(cols = all_of(input$emotions),\n                   names_to = \"emotion\",\n                   values_to = \"value\") %>%\n      ggplot(aes(x = as.factor(get(group_var)), y = value, color = emotion)) +\n      geom_line(aes(group = emotion), size = 1) +\n      geom_point(size = 3) +\n      scale_color_manual(values = nostalgic_colors) +\n      labs(\n        x = input$time_group,\n        y = \"Score\",\n        title = \"Emotion Trends Over Time\"\n      ) +\n      theme_minimal() +\n      theme(\n        text = element_text(family = \"Garamond\", color = \"#1A1A1A\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.grid.major = element_line(color = \"#E5E5E5\"),\n        panel.grid.minor = element_line(color = \"#F0F0F0\"),\n        plot.title = element_text(size = 16, face = \"bold\", color = \"#1A1A1A\"),\n        axis.text = element_text(color = \"#1A1A1A\"),\n        axis.title = element_text(color = \"#1A1A1A\"),\n        legend.text = element_text(color = \"#1A1A1A\"),\n        legend.title = element_text(color = \"#1A1A1A\"),\n        legend.position = \"top\",\n        axis.text.x = element_text(angle = 45, hjust = 1)\n      )\n  })\n  \n  output$dist_plot <- renderPlot({\n    req(filtered_data(), input$emotions)\n    \n    filtered_data() %>%\n      select(all_of(input$emotions)) %>%\n      pivot_longer(cols = everything(),\n                   names_to = \"emotion\",\n                   values_to = \"value\") %>%\n      ggplot(aes(x = value, fill = emotion)) +\n      geom_density(alpha = 0.7) +\n      scale_fill_manual(values = nostalgic_colors) +\n      labs(\n        x = \"Score\",\n        y = \"Density\",\n        title = \"Distribution of Emotion Scores\"\n      ) +\n      theme_minimal() +\n      theme(\n        text = element_text(family = \"Garamond\", color = \"#1A1A1A\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.grid.major = element_line(color = \"#E5E5E5\"),\n        panel.grid.minor = element_line(color = \"#F0F0F0\"),\n        plot.title = element_text(size = 16, face = \"bold\", color = \"#1A1A1A\"),\n        axis.text = element_text(color = \"#1A1A1A\"),\n        axis.title = element_text(color = \"#1A1A1A\"),\n        legend.text = element_text(color = \"#1A1A1A\"),\n        legend.title = element_text(color = \"#1A1A1A\"),\n        legend.position = \"top\",\n        axis.text.x = element_text(angle = 45, hjust = 1)\n      )\n  })\n  \n  output$doc_analysis <- renderDT({\n    req(data(), input$doc_id, input$doc_emotions)\n    \n    data() %>%\n      filter(doc_id == input$doc_id) %>%\n      select(sentence, all_of(input$doc_emotions)) %>%\n      arrange(desc(across(all_of(input$doc_emotions[1])))) %>%\n      datatable(\n        options = list(\n          pageLength = 10,\n          dom = 'lftip',\n          filters = list(position = 'top', clear = TRUE)\n        ),\n        filter = 'top'\n      )\n  })\n  \n  output$doc_emotion_plot <- renderPlot({\n    req(data(), input$doc_id, input$doc_emotions)\n    \n    data() %>%\n      filter(doc_id == input$doc_id) %>%\n      select(sentence, all_of(input$doc_emotions)) %>%\n      pivot_longer(cols = all_of(input$doc_emotions),\n                   names_to = \"emotion\",\n                   values_to = \"value\") %>%\n      ggplot(aes(x = value, y = sentence, fill = emotion)) +\n      geom_col(position = \"dodge\") +\n      scale_fill_manual(values = nostalgic_colors) +\n      labs(\n        x = \"Score\",\n        y = \"Sentence\",\n        title = \"Sentence-Level Emotion Scores\"\n      ) +\n      theme_minimal() +\n      theme(\n        text = element_text(family = \"Garamond\", color = \"#1A1A1A\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.grid.major = element_line(color = \"#E5E5E5\"),\n        panel.grid.minor = element_line(color = \"#F0F0F0\"),\n        plot.title = element_text(size = 16, face = \"bold\", color = \"#1A1A1A\"),\n        axis.text = element_text(color = \"#1A1A1A\"),\n        axis.title = element_text(color = \"#1A1A1A\"),\n        legend.text = element_text(color = \"#1A1A1A\"),\n        legend.title = element_text(color = \"#1A1A1A\"),\n        legend.position = \"top\"\n      )\n  })\n  \n  output$doc_time_plot <- renderPlot({\n    req(data(), input$doc_id, input$doc_emotions)\n    \n    data() %>%\n      filter(doc_id == input$doc_id) %>%\n      mutate(sentence_num = row_number()) %>%\n      select(sentence_num, all_of(input$doc_emotions)) %>%\n      pivot_longer(cols = all_of(input$doc_emotions),\n                   names_to = \"emotion\",\n                   values_to = \"value\") %>%\n      ggplot(aes(x = sentence_num, y = value, color = emotion)) +\n      geom_line(size = 1) +\n      geom_point(size = 3) +\n      scale_color_manual(values = nostalgic_colors) +\n      labs(\n        x = \"Sentence Number\",\n        y = \"Score\",\n        title = \"Sentence-Level Emotion Progress\"\n      ) +\n      theme_minimal() +\n      theme(\n        text = element_text(family = \"Garamond\", color = \"#1A1A1A\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        panel.grid.major = element_line(color = \"#E5E5E5\"),\n        panel.grid.minor = element_line(color = \"#F0F0F0\"),\n        plot.title = element_text(size = 16, face = \"bold\", color = \"#1A1A1A\"),\n        axis.text = element_text(color = \"#1A1A1A\"),\n        axis.title = element_text(color = \"#1A1A1A\"),\n        legend.text = element_text(color = \"#1A1A1A\"),\n        legend.title = element_text(color = \"#1A1A1A\"),\n        legend.position = \"top\",\n        axis.text.x = element_text(angle = 45, hjust = 1)\n      )\n  })\n  \n  filtered_table_data <- reactive({\n    req(filtered_data())\n    if (!is.null(input[[\"journal_table_rows_all\"]])) {\n      filtered_data()[input[[\"journal_table_rows_all\"]], ]\n    } else {\n      filtered_data()\n    }\n  })\n  \n  output$journal_table <- renderDT({\n    req(filtered_data())\n    filtered_data() %>%\n      select(doc_id, date, text, sentence, everything()) %>%\n      datatable(\n        options = list(\n          pageLength = 10,\n          dom = 'lftip',\n          filters = list(position = 'top', clear = TRUE),\n          server = TRUE\n        ),\n        filter = 'top'\n      )\n  })\n  \n  output$explorer_plot <- renderPlot({\n    req(filtered_table_data(), input$plot_type, input$explore_emotions)\n    \n    switch(input$plot_type,\n           \"emotions_time\" = {\n             filtered_table_data() %>%\n               group_by(date) %>%\n               summarise(across(all_of(input$explore_emotions), mean)) %>%\n               pivot_longer(cols = all_of(input$explore_emotions),\n                            names_to = \"emotion\",\n                            values_to = \"value\") %>%\n               ggplot(aes(x = date, y = value, color = emotion)) +\n               geom_line(size = 1) +\n               geom_point(size = 3, alpha = 0.5) +\n               scale_color_manual(values = nostalgic_colors) +\n               labs(\n                 title = \"Emotions Over Time\",\n                 y = \"Average Score\",\n                 x = \"Date\"\n               ) +\n               theme_minimal() +\n               theme(\n                 text = element_text(family = \"Garamond\", color = \"#1A1A1A\"),\n                 plot.background = element_rect(fill = \"#FFFFFF\", color = NA),\n                 panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n                 panel.grid.major = element_line(color = \"#E5E5E5\"),\n                 panel.grid.minor = element_line(color = \"#F0F0F0\"),\n                 plot.title = element_text(size = 16, face = \"bold\", color = \"#1A1A1A\"),\n                 axis.text = element_text(color = \"#1A1A1A\"),\n                 axis.title = element_text(color = \"#1A1A1A\"),\n                 legend.text = element_text(color = \"#1A1A1A\"),\n                 legend.title = element_text(color = \"#1A1A1A\"),\n                 legend.position = \"top\",\n                 axis.text.x = element_text(angle = 45, hjust = 1)\n               )\n           },\n           \"correlations\" = {\n             filtered_table_data() %>%\n               select(all_of(input$explore_emotions)) %>%\n               cor() %>%\n               as.data.frame() %>%\n               rownames_to_column(\"emotion1\") %>%\n               pivot_longer(-emotion1, \n                            names_to = \"emotion2\",\n                            values_to = \"correlation\") %>%\n               ggplot(aes(x = emotion1, y = emotion2, fill = correlation)) +\n               geom_tile() +\n               scale_fill_gradient2(\n                 low = \"#654062\",    # Deep purple\n                 mid = \"#FFFFFF\",    # White\n                 high = \"#9C3D54\",   # Rich rose\n                 midpoint = 0,\n                 limits = c(-1, 1)\n               ) +\n               geom_text(\n                 aes(label = round(correlation, 2)),\n                 family = \"Garamond\"\n               ) +\n               labs(title = \"Emotion Correlations\") +\n               theme_minimal() +\n               theme(\n                 text = element_text(family = \"Garamond\"),\n                 plot.background = element_rect(fill = \"#F5F1E9\", color = NA),\n                 panel.background = element_rect(fill = \"#F5F1E9\", color = NA),\n                 plot.title = element_text(size = 16, face = \"bold\"),\n                 axis.text.x = element_text(angle = 45, hjust = 1),\n                 legend.position = \"top\"\n               )\n           },\n           \"entries_day\" = {\n             filtered_table_data() %>%\n               group_by(date) %>%\n               summarise(entries = n_distinct(doc_id)) %>%\n               ggplot(aes(x = date, y = entries, fill = \"Entries\")) +  # Added fill aesthetic\n               geom_col(position = \"dodge\") +\n               scale_fill_manual(values = c(\"Entries\" = nostalgic_colors[1])) +  # Use first color from nostalgic_colors\n               labs(\n                 title = \"Number of Entries per Day\",\n                 y = \"Number of Entries\",\n                 x = \"Date\"\n               ) +\n               theme_minimal() +\n               theme(\n                 text = element_text(family = \"Garamond\", color = \"#1A1A1A\"),\n                 plot.background = element_rect(fill = \"#FFFFFF\", color = NA),\n                 panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n                 panel.grid.major = element_line(color = \"#E5E5E5\"),\n                 panel.grid.minor = element_line(color = \"#F0F0F0\"),\n                 plot.title = element_text(size = 16, face = \"bold\", color = \"#1A1A1A\"),\n                 axis.text = element_text(color = \"#1A1A1A\"),\n                 axis.title = element_text(color = \"#1A1A1A\"),\n                 legend.text = element_text(color = \"#1A1A1A\"),\n                 legend.title = element_text(color = \"#1A1A1A\"),\n                 legend.position = \"none\",  # Hide legend since we only have one category\n                 axis.text.x = element_text(angle = 45, hjust = 1)\n               )\n           },\n           \"emotions_hour\" = {\n             filtered_table_data() %>%\n               group_by(hour) %>%\n               summarise(across(all_of(input$explore_emotions), mean)) %>%\n               pivot_longer(cols = all_of(input$explore_emotions),\n                            names_to = \"emotion\",\n                            values_to = \"value\") %>%\n               ggplot(aes(x = as.factor(hour), y = value, fill = emotion)) +\n               geom_col(position = \"dodge\") +\n               scale_fill_manual(values = nostalgic_colors) +\n               labs(\n                 title = \"Average Emotions by Hour of Day\",\n                 y = \"Average Score\",\n                 x = \"Hour\"\n               ) +\n               theme_minimal() +\n               theme(\n                 text = element_text(family = \"Garamond\", color = \"#1A1A1A\"),\n                 plot.background = element_rect(fill = \"#FFFFFF\", color = NA),\n                 panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n                 panel.grid.major = element_line(color = \"#E5E5E5\"),\n                 panel.grid.minor = element_line(color = \"#F0F0F0\"),\n                 plot.title = element_text(size = 16, face = \"bold\", color = \"#1A1A1A\"),\n                 axis.text = element_text(color = \"#1A1A1A\"),\n                 axis.title = element_text(color = \"#1A1A1A\"),\n                 legend.text = element_text(color = \"#1A1A1A\"),\n                 legend.title = element_text(color = \"#1A1A1A\"),\n                 legend.position = \"top\",\n                 axis.text.x = element_text(angle = 45, hjust = 1)\n               )\n           }\n    )\n  })\n}\n\nshinyApp(ui, server)","type":"text"}]
